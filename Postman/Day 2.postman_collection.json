{
	"info": {
		"_postman_id": "31e83a3f-c352-4125-8dd6-d39cdaf243a8",
		"name": "Day 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33337500",
		"_collection_link": "https://www.postman.com/busayo-3450/workspace/8daf02a2-8dde-4e92-9fc4-5982d819f990/collection/33337500-31e83a3f-c352-4125-8dd6-d39cdaf243a8?action=share&source=collection_link&creator=33337500"
	},
	"item": [
		{
			"name": "AUTH",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required keys\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys(\"accessToken\", \"refreshToken\", \"id\", \"username\", \"email\", \"firstName\", \"lastName\", \"gender\", \"image\");\r",
									"});\r",
									"function isValidJWT(token) {\r",
									"    return /^[A-Za-z0-9-_=]+\\.([A-Za-z0-9-_=]+)?\\.([A-Za-z0-9-_.+/=]*)?$/.test(token);\r",
									"}\r",
									"\r",
									"pm.test(\"Access Token is a valid JWT\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(isValidJWT(jsonData.accessToken)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Refresh Token is a valid JWT\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(isValidJWT(jsonData.refreshToken)).to.be.true;\r",
									"});\r",
									"pm.test(\"Validate response data types\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.gender).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.image).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.accessToken).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.refreshToken).to.be.a(\"string\");\r",
									"});\r",
									"pm.test(\"Email should be a valid format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(jsonData.email).to.match(emailPattern);\r",
									"});\r",
									"pm.test(\"Gender should be male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect([\"male\", \"female\"]).to.include(jsonData.gender);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n   {\r\n   \"username\": \"emilys\",\r\n    \"password\": \"emilyspass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Important fields are not empty\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.username).to.not.be.empty;\r",
									"    pm.expect(jsonData.email).to.not.be.empty;\r",
									"    pm.expect(jsonData.firstName).to.not.be.empty;\r",
									"    pm.expect(jsonData.lastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"User role is admin\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.role).to.equal(\"admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys(\"accessToken\", \"refreshToken\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"description": "The **auth** endpoint provides details about the user authentication and authorization and refresh tokens.EndFragment"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://dummyjson.com"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}